export

# Overide windows shell in case cygwin is present
SHELL := $(if $(findstring Windows, $(OS))$(findstring WINDOWS,$(OS)),$(windir)\system32\cmd.exe,$(SHELL))

BASE_DIR ?= .
ifeq ($(strip $(APP_NAME)),) 
APP_NAME := $(subst .,_,$(notdir $(lastword $(abspath .))))
endif
APP_NAME ?= $(subst .,_,$(notdir $(lastword $(abspath .))))
CONFIG ?= Release
BUILD_NAME ?= $(CONFIG)
WORKING_DIR ?= .build_$(BUILD_NAME)
TARGET_DIR = ./$(WORKING_DIR)
FAKE_INC_DIR = $(TARGET_DIR)/fake_inc

BIN_DIR=$(BASE_DIR)/bin/$(CONFIG)

MAKEFILE_LIST1 = $(foreach x, $(MAKEFILE_LIST), $(if $(wildcard $x),$x,"""$x"""))
MAKEFILE_LIST2 = $(subst """,,$(subst """  """,&&&,$(MAKEFILE_LIST1)))

XCOMMON_MAKEFILE = $(subst &&&,\ ,$(filter %module_xcommon/build/Makefile.common,$(MAKEFILE_LIST2)))


MODULE_XCOMMON_DIR = $(patsubst %/Makefile.common,%,$(XCOMMON_MAKEFILE))/..

.PHONY: $(BIN_DIR)/$(APP_NAME).xe
.PHONY: clean_common

$(BIN_DIR)/$(APP_NAME).xe:
	@xmake -f $(MODULE_XCOMMON_DIR)/build/Makefile.common1 --no-print-directory $(BIN_DIR)/$(APP_NAME).xe

clean_common:
	@xmake -f $(MODULE_XCOMMON_DIR)/build/Makefile.common1 --no-print-directory clean_common

# The final target of the build. This is usually dependent on a binary file
# in the $(BIN_DIR) directory e.g.
#
#  all : $(BIN_DIR)/my_app.xe
ifeq ($(OVERRIDE_ALL_TARGET),)
all: $(BIN_DIR)/$(APP_NAME).xe
	@echo Build Complete
endif

ifeq ($(OVERRIDE_CLEAN_TARGET),)
clean: clean_common
endif